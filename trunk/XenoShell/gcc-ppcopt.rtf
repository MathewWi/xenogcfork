
Target specific options:
  -mnewlib                  no description yet
  -m32                      Generate 32-bit code
  -m64                      Generate 64-bit code
  -mshlib                   no description yet
  -mwindiss                 Use the WindISS simulator
  -memb                     Set the PPC_EMB bit in the ELF flags header
  -mmvme                    Link with libmvme.a, libc.a and crt0.o
  -myellowknife             Link with libyk.a, libc.a and crt0.o
  -mads                     Link with libads.a, libc.a and crt0.o
  -msim                     Link with libsim.a, libc.a and sim-crt0.o
  -mno-sdata                no description yet
  -msdata                   no description yet
  -mno-regnames             Don't use alternate register names
  -mregnames                Use alternate register names
  -mno-bit-word             Do not allow bit-fields to cross word boundaries
  -mno-eabi                 Don't use EABI
  -meabi                    Use EABI
  -mno-traceback            no description yet
  -mno-prototype            no description yet
  -mprototype               no description yet
  -mfull-toc                no description yet
  -mtoc                     no description yet
  -mno-toc                  no description yet
  -mbig                     Produce big endian code
  -mbig-endian              Produce big endian code
  -mlittle                  Produce little endian code
  -mlittle-endian           Produce little endian code
  -mno-relocatable-lib      Don't produce code relocatable at runtime
  -mrelocatable-lib         Produce code relocatable at runtime
  -mno-relocatable          Don't produce code relocatable at runtime
  -mrelocatable             Produce code relocatable at runtime
  -mno-strict-align         Assume that unaligned accesses are handled by the system
  -mstrict-align            Don't assume that unaligned accesses are handled by the system
  -mno-bit-align            Don't align to the base type of the bit-field
  -mbit-align               Align to the base type of the bit-field
  -mno-mfcrf                Do not generate single field mfcr instruction
  -mmfcrf                   Generate single field mfcr instruction
  -msvr4-struct-return      Return small structures in registers (SVR4 default)
  -maix-struct-return       Return all structures in memory (AIX default)
  -mno-sched-prolog         Do not schedule the start and end of the procedure
  -mno-fused-madd           Do not generate fused multiply/add instructions
  -mfused-madd              Generate fused multiply/add instructions
  -mno-update               Do not generate load/store with update instructions
  -mupdate                  Generate load/store with update instructions
  -mno-string               Do not generate string instructions for block moves
  -mstring                  Generate string instructions for block moves
  -mno-multiple             Do not generate load/store multiple instructions
  -mmultiple                Generate load/store multiple instructions
  -msoft-float              Do not use hardware floating point
  -mhard-float              Use hardware floating point
  -mno-minimal-toc          Place variable addresses in the regular TOC
  -mminimal-toc             Use only one TOC entry per procedure
  -mno-sum-in-toc           Do not place symbol+offset constants in TOC
  -msum-in-toc              Place symbol+offset constants in TOC
  -mno-fp-in-toc            Do not place floating point constants in TOC
  -mfp-in-toc               Place floating point constants in TOC
  -mfull-toc                Put everything in the regular TOC
  -mold-mnemonics           Use old mnemonics for PowerPC architecture
  -mnew-mnemonics           Use new mnemonics for PowerPC architecture
  -mno-altivec              Do not use AltiVec instructions
  -maltivec                 Use AltiVec instructions
  -mno-powerpc64            Do not use PowerPC-64 instruction set
  -mpowerpc64               Use PowerPC-64 instruction set
  -mno-powerpc-gfxopt       Do not use PowerPC Graphics group optional instructions
  -mpowerpc-gfxopt          Use PowerPC Graphics group optional instructions
  -mno-powerpc-gpopt        Do not use PowerPC General Purpose group optional instructions
  -mpowerpc-gpopt           Use PowerPC General Purpose group optional instructions
  -mno-powerpc              Do not use PowerPC instruction set
  -mpowerpc                 Use PowerPC instruction set
  -mno-power                Do not use POWER instruction set
  -mno-power2               Do not use POWER2 instruction set
  -mpower2                  Use POWER2 instruction set
  -mpower                   Use POWER instruction set
  -mtls-size=               Specify bit size of immediate TLS offsets
  -msdata=                  Select method for sdata handling
  -mcall-                   Select ABI calling convention
  -mprioritize-restricted-insns= Specify scheduling priority for dispatch slot restricted insns
  -malign-                  Specify alignment of structure fields default/natural
  -minsert-sched-nops=      Specify which post scheduling nop insertion scheme to apply
  -msched-costly-dep=       Determine which dependences between insns are considered costly
  -mwarn-altivec-long       Warn about deprecated 'vector long ...' AltiVec type usage
  -mlongcall                Avoid all range limits on call instructions
  -mvrsave=                 Specify yes/no if VRSAVE instructions should be generated for AltiVec
  -mfloat-gprs=             Specify yes/no if using floating point in the GPRs
  -mspe=                    Specify yes/no if SPE SIMD instructions should be generated
  -misel=                   Specify yes/no if isel instructions should be generated
  -mlong-double-            Specify size of long double (64 or 128 bits)
  -mabi=                    Specify ABI to use
  -mtraceback=              Select full, part, or no traceback table
  -mdebug=                  Enable debug output
  -mtune=                   Schedule code for given CPU
  -mcpu=                    Use features of and schedule code for given CPU
PowerPC options:
-a32			generate ELF32/XCOFF32
-a64			generate ELF64/XCOFF64
-u			ignored
-mpwrx, -mpwr2		generate code for POWER/2 (RIOS2)
-mpwr			generate code for POWER (RIOS1)
-m601			generate code for PowerPC 601
-mppc, -mppc32, -m603, -m604
			generate code for PowerPC 603/604
-m403, -m405		generate code for PowerPC 403/405
-m440			generate code for PowerPC 440
-m7400, -m7410, -m7450, -m7455
			generate code For PowerPC 7400/7410/7450/7455
-mppc64, -m620		generate code for PowerPC 620/625/630
-mppc64bridge		generate code for PowerPC 64, including bridge insns
-mbooke64		generate code for 64-bit PowerPC BookE
-mbooke, mbooke32	generate code for 32-bit PowerPC BookE
-mpower4		generate code for Power4 architecture
-mcom			generate code Power/PowerPC common instructions
-many			generate code for any architecture (PWR/PWRX/PPC)
-maltivec		generate code for AltiVec
-me500, -me500x2	generate code for Motorola e500 core complex
-mspe			generate code for Motorola SPE instructions
-mregnames		Allow symbolic names for registers
-mno-regnames		Do not allow symbolic names for registers
-mspe			generate code for Motorola SPE instructions
-mgekko			generate code for PowerPC Gekko
-mrelocatable		support for GCC's -mrelocatble option
-mrelocatable-lib	support for GCC's -mrelocatble-lib option
-memb			set PPC_EMB bit in ELF flags
-mlittle, -mlittle-endian, -l, -le
			generate code for a little endian machine
-mbig, -mbig-endian, -b, -be
			generate code for a big endian machine
-msolaris		generate code for Solaris
-mno-solaris		do not generate code for Solaris
-V			print assembler version number
-Qy, -Qn		ignored
